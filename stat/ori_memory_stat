Filename: /home/ljy/BeautyGAN-100/net_v2.py

Line #    Mem usage    Increment   Line Contents
================================================
   389    871.3 MiB    871.3 MiB       @staticmethod
   390                                 @profile
   391                                 def get_weight(mask_c, mask_s, fea_c, fea_s, diff_c, diff_s):
   392                                     """  s --> source; c --> target
   393                                     feature size: (1, 256, 64, 64)
   394                                     diff: (3, 136, 32, 32)
   395                                     """
   396    871.3 MiB      0.0 MiB           HW = config.diff_size * config.diff_size
   397    871.3 MiB      0.0 MiB           batch_size = 3
   398    871.3 MiB      0.0 MiB           if config.w_visual and (fea_s is not None):   # fea_s when i==3
   399                                         # get 3 part fea using mask
   400    871.3 MiB      0.0 MiB               channel_num = fea_s.shape[1]
   401                             
   402    879.4 MiB      8.0 MiB               mask_c_re = F.interpolate(mask_c, size=config.diff_size).repeat(1, channel_num, 1, 1)  # (3, c, h, w)
   403    891.5 MiB     12.1 MiB               fea_c = fea_c.repeat(3, 1, 1, 1)                 # (3, c, h, w)
   404    903.3 MiB     11.9 MiB               fea_c = fea_c * mask_c_re                        # (3, c, h, w) 最后做atten的fea。3代表3个部位。
   405                             
   406    915.5 MiB     12.1 MiB               mask_s_re = F.interpolate(mask_s, size=config.diff_size).repeat(1, channel_num, 1, 1)
   407    927.3 MiB     11.9 MiB               fea_s = fea_s.repeat(3, 1, 1, 1)
   408    939.4 MiB     12.1 MiB               fea_s = fea_s * mask_s_re
   409                             
   410    969.9 MiB     30.4 MiB               theta_input = torch.cat((fea_c * config.w_visual, diff_c), dim=1)
   411    988.2 MiB     18.3 MiB               phi_input = torch.cat((fea_s * config.w_visual, diff_s), dim=1)
   412                                         # theta_input = fea_c * config.w_visual
   413                                         # phi_input = fea_s * config.w_visual
   414                             
   415    988.2 MiB      0.0 MiB               theta_target = theta_input.view(batch_size, -1, HW)  # (N, C+136, H*W)
   416    988.2 MiB      0.0 MiB               theta_target = theta_target.permute(0, 2, 1)  # (N, H*W, C)
   417                             
   418    988.2 MiB      0.0 MiB               phi_source = phi_input.view(batch_size, -1, HW)  # (N, C+136, H*W)
   419                                     else:
   420                                         theta_target = diff_c.view(batch_size, -1, HW).permute(0, 2, 1)  # (N, H*W, 136)
   421                                         phi_source = diff_s.view(batch_size, -1, HW)  # (N, 136, H*W)
   422                             
   423   1180.3 MiB    192.2 MiB           weight = torch.bmm(theta_target, phi_source)    # (3, HW, HW)  3是batch_size，其实就是部位的个数
   424   1180.3 MiB      0.0 MiB           one = torch.tensor(1.0)
   425   1372.5 MiB    192.2 MiB           weight_mask = torch.where(weight == torch.tensor(0.0), weight, one)  # 取出为1的mask
   426                             
   427                                     # weight_cpu = weight.detach().cpu().numpy()[1]
   428                                     # for i in range(459, 489):
   429                                     #     cur_w = weight_cpu[i].reshape((32, 32))
   430                                     #     plt.figure(figsize=(6, 6))
   431                                     #     # plt.imshow(cur_w, cmap=plt.cm.hot, vmin=0, vmax=1)
   432                                     #     sns.heatmap(cur_w, vmin=0, vmax=1, center=0)
   433                                     #     plt.savefig(f'visulization/_spade_skin_0.2_atten_usediff_onlydiff/weight_pix_{i}_before.png', dpi=100)
   434                             
   435   1334.6 MiB      0.0 MiB           weight = weight * config.w_weight  # magic numpy，用于调节采样的范围
   436                                     # weight = weight * 10             # 用于展示可视化结果
   437   1335.8 MiB      1.2 MiB           weight = nn.Softmax(dim=-1)(weight)
   438   1335.9 MiB      0.1 MiB           weight = weight * weight_mask  # 不能对有grad的Tensor使用 *= 这种inplace操作！
   439   1335.9 MiB      0.0 MiB           return weight


Filename: /home/ljy/BeautyGAN-100/net_v2.py

Line #    Mem usage    Increment   Line Contents
================================================
   441    804.3 MiB    804.3 MiB       @profile
   442                                 def forward_atten(self, c, s, mask_list_c, mask_list_s, diff_c, diff_s, gamma=None, beta=None, ret=False):
   443                                     """attention version
   444                                     c: (b, c, h, w)
   445                                     mask_list_c: lip, skin, eye. (b, 1, h, w)
   446                                     """
   447    804.3 MiB      0.0 MiB           img_c = c
   448    804.3 MiB      0.0 MiB           img_s = s
   449    804.3 MiB      0.0 MiB           mask_c = torch.cat(mask_list_c, 0)      # (3, 1, h, w)
   450    804.3 MiB      0.0 MiB           mask_s = torch.cat(mask_list_s, 0)
   451                                     # forward c in tnet
   452    838.4 MiB     34.1 MiB           c_tnet = self.tnet_in_conv(c)
   453    887.2 MiB     48.8 MiB           s = self.pnet_in(s)
   454    903.2 MiB     16.0 MiB           c_tnet = self.tnet_in_spade(c_tnet)
   455    903.2 MiB      0.0 MiB           c_tnet = self.tnet_in_relu(c_tnet)
   456                             
   457                                     # down-sampling
   458    903.2 MiB      0.0 MiB           for i in range(2):
   459    903.2 MiB      0.0 MiB               if gamma is None:
   460    903.2 MiB      0.0 MiB                   cur_pnet_down = getattr(self, f'pnet_down_{i+1}')
   461    903.2 MiB      0.0 MiB                   s = cur_pnet_down(s)
   462                             
   463    903.2 MiB      0.0 MiB               cur_tnet_down_conv = getattr(self, f'tnet_down_conv_{i+1}')
   464    903.2 MiB      0.0 MiB               cur_tnet_down_spade = getattr(self, f'tnet_down_spade_{i+1}')
   465    903.2 MiB      0.0 MiB               cur_tnet_down_relu = getattr(self, f'tnet_down_relu_{i+1}')
   466    855.4 MiB      0.0 MiB               c_tnet = cur_tnet_down_conv(c_tnet)
   467    855.4 MiB      0.0 MiB               c_tnet = cur_tnet_down_spade(c_tnet)
   468    855.4 MiB      0.0 MiB               c_tnet = cur_tnet_down_relu(c_tnet)
   469                             
   470                                     # bottleneck
   471    871.3 MiB      0.0 MiB           for i in range(self.repeat_num):
   472    871.3 MiB      0.0 MiB               if gamma is None and i <= self.p_max:
   473    871.3 MiB      0.0 MiB                   cur_pnet_bottleneck = getattr(self, f'pnet_bottleneck_{i+1}')
   474    871.3 MiB      0.0 MiB               cur_tnet_bottleneck = getattr(self, f'tnet_bottleneck_{i+1}')
   475                             
   476                                         # get s_pnet from p and transform
   477    871.3 MiB      0.0 MiB               if not config.simple and self.stage[1] and i in config.bottlenect_stage:
   478                                             pre_s = s if config.w_visual and i == 3 else None        # 当i=3的时候，在得到新的s前，保留i=2时的s
   479                                             s, gamma1_s, beta1_s, gamma2_s, beta2_s = cur_pnet_bottleneck(s)
   480                                             weight = self.get_weight(mask_c, mask_s, c_tnet, pre_s, diff_c, diff_s)
   481                             
   482                                             gamma1, beta1 = self.atten_feature(mask_s, weight, gamma1_s, beta1_s, self.atten_bottleneck_g, self.atten_bottleneck_b)
   483                                             gamma2, beta2 = self.atten_feature(mask_s, weight, gamma2_s, beta2_s, self.atten_bottleneck_g, self.atten_bottleneck_b)
   484                                             c_tnet = cur_tnet_bottleneck(c_tnet, gamma1, beta1, gamma2, beta2)
   485                                         else:
   486                                             # pre_s = s if config.w_visual and i == 3 else None       # 当i=3的时候，在得到新的s前，保留i=2时的s
   487                                             # if i <= self.p_max:
   488                                             #     s = cur_pnet_bottleneck(s)
   489                             
   490    871.3 MiB      0.0 MiB                   if i==3 and config.simple:
   491    871.3 MiB      0.0 MiB                       if gamma is None:               # not in test_mix
   492    871.3 MiB      0.0 MiB                           s, gamma, beta = self.simple_spade(s)
   493                                                     # if (mask_s[1] != mask_c[1]).any():  # 如果不是同一张图才atten
   494   1071.2 MiB    199.9 MiB                           weight = self.get_weight(mask_c, mask_s, c_tnet, s, diff_c, diff_s)
   495                             
   496                                                     # img_c_np = (de_norm(img_c) * 255).squeeze().cpu().numpy()
   497                                                     # img_s_np = (de_norm(img_s) * 255).squeeze().cpu().numpy()
   498                                                     # save_attn_point(img_c_np, img_s_np, weight, None, config.cur_vis_path)
   499                             
   500   1071.2 MiB      0.0 MiB                           gamma, beta = self.atten_feature(mask_s, weight, gamma, beta, self.atten_bottleneck_g, self.atten_bottleneck_b)
   501   1071.2 MiB      0.0 MiB                           if ret:
   502   1071.2 MiB      0.0 MiB                               return [gamma, beta]
   503                                                 # else:                       # in test mode
   504                                                     # gamma, beta = param_A[0]*w + param_B[0]*(1-w), param_A[1]*w + param_B[1]*(1-w)
   505                             
   506                                                 c_tnet = c_tnet * (1 + gamma) + beta
   507                             
   508    871.3 MiB      0.0 MiB                   if gamma is None and i <= self.p_max:
   509    871.3 MiB      3.8 MiB                       s = cur_pnet_bottleneck(s)
   510    871.3 MiB     12.1 MiB                   c_tnet = cur_tnet_bottleneck(c_tnet)
   511                             
   512                                     # up-sampling
   513                                     for i in range(2):
   514                                         cur_tnet_up_conv = getattr(self, f'tnet_up_conv_{i+1}')
   515                                         cur_tnet_up_spade = getattr(self, f'tnet_up_spade_{i+1}')
   516                                         cur_tnet_up_relu = getattr(self, f'tnet_up_relu_{i+1}')
   517                                         c_tnet = cur_tnet_up_conv(c_tnet)
   518                                         c_tnet = cur_tnet_up_spade(c_tnet)
   519                                         c_tnet = cur_tnet_up_relu(c_tnet)
   520                             
   521                                     c_tnet = self.tnet_out(c_tnet)
   522                                     return c_tnet


Filename: /home/ljy/BeautyGAN-100/net_v2.py

Line #    Mem usage    Increment   Line Contents
================================================
   441    879.8 MiB    879.8 MiB       @profile
   442                                 def forward_atten(self, c, s, mask_list_c, mask_list_s, diff_c, diff_s, gamma=None, beta=None, ret=False):
   443                                     """attention version
   444                                     c: (b, c, h, w)
   445                                     mask_list_c: lip, skin, eye. (b, 1, h, w)
   446                                     """
   447    879.8 MiB      0.0 MiB           img_c = c
   448    879.8 MiB      0.0 MiB           img_s = s
   449    879.8 MiB      0.0 MiB           mask_c = torch.cat(mask_list_c, 0)      # (3, 1, h, w)
   450    879.8 MiB      0.0 MiB           mask_s = torch.cat(mask_list_s, 0)
   451                                     # forward c in tnet
   452    879.8 MiB      0.0 MiB           c_tnet = self.tnet_in_conv(c)
   453    883.3 MiB      3.5 MiB           s = self.pnet_in(s)
   454    883.3 MiB      0.0 MiB           c_tnet = self.tnet_in_spade(c_tnet)
   455    883.3 MiB      0.0 MiB           c_tnet = self.tnet_in_relu(c_tnet)
   456                             
   457                                     # down-sampling
   458    883.3 MiB      0.0 MiB           for i in range(2):
   459    883.3 MiB      0.0 MiB               if gamma is None:
   460                                             cur_pnet_down = getattr(self, f'pnet_down_{i+1}')
   461                                             s = cur_pnet_down(s)
   462                             
   463    883.3 MiB      0.0 MiB               cur_tnet_down_conv = getattr(self, f'tnet_down_conv_{i+1}')
   464    883.3 MiB      0.0 MiB               cur_tnet_down_spade = getattr(self, f'tnet_down_spade_{i+1}')
   465    883.3 MiB      0.0 MiB               cur_tnet_down_relu = getattr(self, f'tnet_down_relu_{i+1}')
   466    883.3 MiB      0.0 MiB               c_tnet = cur_tnet_down_conv(c_tnet)
   467    883.3 MiB      0.0 MiB               c_tnet = cur_tnet_down_spade(c_tnet)
   468    883.3 MiB      0.0 MiB               c_tnet = cur_tnet_down_relu(c_tnet)
   469                             
   470                                     # bottleneck
   471    883.3 MiB      0.0 MiB           for i in range(self.repeat_num):
   472    883.3 MiB      0.0 MiB               if gamma is None and i <= self.p_max:
   473                                             cur_pnet_bottleneck = getattr(self, f'pnet_bottleneck_{i+1}')
   474    883.3 MiB      0.0 MiB               cur_tnet_bottleneck = getattr(self, f'tnet_bottleneck_{i+1}')
   475                             
   476                                         # get s_pnet from p and transform
   477    883.3 MiB      0.0 MiB               if not config.simple and self.stage[1] and i in config.bottlenect_stage:
   478                                             pre_s = s if config.w_visual and i == 3 else None        # 当i=3的时候，在得到新的s前，保留i=2时的s
   479                                             s, gamma1_s, beta1_s, gamma2_s, beta2_s = cur_pnet_bottleneck(s)
   480                                             weight = self.get_weight(mask_c, mask_s, c_tnet, pre_s, diff_c, diff_s)
   481                             
   482                                             gamma1, beta1 = self.atten_feature(mask_s, weight, gamma1_s, beta1_s, self.atten_bottleneck_g, self.atten_bottleneck_b)
   483                                             gamma2, beta2 = self.atten_feature(mask_s, weight, gamma2_s, beta2_s, self.atten_bottleneck_g, self.atten_bottleneck_b)
   484                                             c_tnet = cur_tnet_bottleneck(c_tnet, gamma1, beta1, gamma2, beta2)
   485                                         else:
   486                                             # pre_s = s if config.w_visual and i == 3 else None       # 当i=3的时候，在得到新的s前，保留i=2时的s
   487                                             # if i <= self.p_max:
   488                                             #     s = cur_pnet_bottleneck(s)
   489                             
   490    883.3 MiB      0.0 MiB                   if i==3 and config.simple:
   491    883.3 MiB      0.0 MiB                       if gamma is None:               # not in test_mix
   492                                                     s, gamma, beta = self.simple_spade(s)
   493                                                     # if (mask_s[1] != mask_c[1]).any():  # 如果不是同一张图才atten
   494                                                     weight = self.get_weight(mask_c, mask_s, c_tnet, s, diff_c, diff_s)
   495                             
   496                                                     # img_c_np = (de_norm(img_c) * 255).squeeze().cpu().numpy()
   497                                                     # img_s_np = (de_norm(img_s) * 255).squeeze().cpu().numpy()
   498                                                     # save_attn_point(img_c_np, img_s_np, weight, None, config.cur_vis_path)
   499                             
   500                                                     gamma, beta = self.atten_feature(mask_s, weight, gamma, beta, self.atten_bottleneck_g, self.atten_bottleneck_b)
   501                                                     if ret:
   502                                                         return [gamma, beta]
   503                                                 # else:                       # in test mode
   504                                                     # gamma, beta = param_A[0]*w + param_B[0]*(1-w), param_A[1]*w + param_B[1]*(1-w)
   505                             
   506    883.3 MiB      0.0 MiB                       c_tnet = c_tnet * (1 + gamma) + beta
   507                             
   508    883.3 MiB      0.0 MiB                   if gamma is None and i <= self.p_max:
   509                                                 s = cur_pnet_bottleneck(s)
   510    883.3 MiB      0.0 MiB                   c_tnet = cur_tnet_bottleneck(c_tnet)
   511                             
   512                                     # up-sampling
   513    912.1 MiB      0.0 MiB           for i in range(2):
   514    883.7 MiB      0.0 MiB               cur_tnet_up_conv = getattr(self, f'tnet_up_conv_{i+1}')
   515    883.7 MiB      0.0 MiB               cur_tnet_up_spade = getattr(self, f'tnet_up_spade_{i+1}')
   516    883.7 MiB      0.0 MiB               cur_tnet_up_relu = getattr(self, f'tnet_up_relu_{i+1}')
   517    896.1 MiB     12.4 MiB               c_tnet = cur_tnet_up_conv(c_tnet)
   518    912.1 MiB     16.0 MiB               c_tnet = cur_tnet_up_spade(c_tnet)
   519    912.1 MiB      0.0 MiB               c_tnet = cur_tnet_up_relu(c_tnet)
   520                             
   521    913.1 MiB      1.0 MiB           c_tnet = self.tnet_out(c_tnet)
   522    913.1 MiB      0.0 MiB           return c_tnet


Filename: my_test.py

Line #    Mem usage    Increment   Line Contents
================================================
    80    304.8 MiB    304.8 MiB   @profile
    81                             def test_net():
    82                                 # enable cudnn
    83    304.8 MiB      0.0 MiB       cudnn.benchmark = True
    84                             
    85                                 # get the DataLoader
    86    304.8 MiB      0.0 MiB       if config.use_mask:
    87    372.8 MiB     68.0 MiB           data_loaders = get_loader(dataset_config, config, mode="test")
    88                                 else:
    89                                     data_loaders = get_loader(dataset_config, config, mode="inference")
    90                             
    91                                 # get the solver
    92    372.8 MiB      0.0 MiB       if args.model == 'cycleGAN':
    93                                     solver = Solver_cycleGAN(data_loaders, config, dataset_config)
    94    372.8 MiB      0.0 MiB       elif args.model =='makeupGAN':
    95    545.5 MiB    172.8 MiB           solver = Solver_makeupGAN(data_loaders, config, dataset_config)
    96                                 else:
    97                                     print("model that not support")
    98                                     exit()
    99    545.5 MiB      0.0 MiB       if config.test_mix:
   100                                     solver.test_mix()
   101                                 else:
   102    709.2 MiB    163.7 MiB           solver.test()


